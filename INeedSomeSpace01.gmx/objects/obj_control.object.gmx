<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>round_started = false;
round_end = false;
popup = false;
battle_count = 3;
alarm[1] = room_speed;
scr_1 = 0;
scr_2 = 0;
scr_3 = 0;
scr_4 = 0;
P1_wins = false;
P2_wins = false;
P3_wins = false;
P4_wins = false;
draw    = false; 
alarm[0] = room_speed * 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>popup = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battle_count -= 1;
alarm[1] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create( irandom_range(64, room_width - 64),irandom_range(64, room_height - 64),obj_collectable);
alarm[0] = room_speed * 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(round_end){
    if(keyboard_check_released(vk_enter) || keyboard_check_released(vk_return) ||
            gamepad_button_check_released(0, gp_face1) || gamepad_button_check_released(1, gp_face1)||
            gamepad_button_check_released(2, gp_face1)|| gamepad_button_check_released(3, gp_face1)){
            if(instance_exists(obj_thrusters_emitter)){
                with(obj_thrusters_emitter){
                    if(part_system_exists(part_sys_thrust)){
                        part_system_clear(part_sys_thrust);
                        part_system_destroy(part_sys_thrust);
                    }
                }
            }
            room_restart();
        }
        
        if(keyboard_check_released(vk_escape) ||
            gamepad_button_check_released(0, gp_face2) || gamepad_button_check_released(1, gp_face2)||
            gamepad_button_check_released(2, gp_face2)|| gamepad_button_check_released(3, gp_face2)){
            room_goto(rm_start); // Change to get you to start screen
        }
}

        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_visitor_50);
draw_set_colour(c_white);
draw_set_halign(fa_left);
draw_text(128, view_hport - 56, string(scr_1));
draw_set_halign(fa_right);
draw_text(view_wport - 128, 2, string(scr_2));
draw_set_halign(fa_right);
draw_text(view_wport - 128, view_hport - 56, string(scr_3));
draw_set_halign(fa_left);
draw_text(128, 2, string(scr_4));
draw_set_halign(fa_center);
draw_text(view_wport/2, 20,/* "Time: " + obj_countdown_clock.show_hours + ":" + */obj_countdown_clock.show_minutes + ":" + obj_countdown_clock.show_seconds); // Draw variables

if(battle_count &gt; 0){
    draw_set_halign(fa_center);
    draw_text(view_wport / 2, view_hport / 2, battle_count);
} else if(battle_count == 0){
    draw_set_halign(fa_center);
    draw_text(view_wport / 2, view_hport / 2, "IGNITE!!!");
    round_started = true;
}
    
if(P1_wins){
    draw_sprite(spr_win_popup, 0, view_wport/2, view_hport/2);
    //draw_sprite(spr_win_popup, 0, room_width/2, room_height/2);
    draw_text(view_wport/2, view_hport/2, "Willy Wins");
}else if(P2_wins){
    draw_sprite(spr_win_popup, 0, view_wport/2, view_hport/2);
    draw_text(view_wport/2, view_hport/2, "Doug Wins");
}else if(P3_wins){
    draw_sprite(spr_win_popup, 0, view_wport/2, room_height/2);
    draw_text(view_wport/2, view_hport/2, "Jerry Wins");
} else if(P4_wins){
    draw_sprite(spr_win_popup, 0, view_wport/2, room_height/2);
    draw_text(view_wport/2, view_hport/2, "Zoe Wins");
}else if(draw){
    draw_sprite(spr_win_popup, 0, room_width/2, room_height/2);
    draw_text(view_wport/2, room_height/2, "This Is A Draw");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
